name: Deploy to Azure with azd

on:
    workflow_dispatch:
    push:
      branches:
        - main
        - cruft/update

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
    id-token: write
    contents: read

jobs:
    build:
      runs-on: ubuntu-latest
      outputs:
        uri: ${{ steps.output.outputs.uri }}
      env:
        AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Install azd
          uses: Azure/setup-azd@v1.0.0

        - name: Log in with Azure (Federated Credentials)
          if: ${{ env.AZURE_CLIENT_ID != '' }}
          run: |
            azd auth login `
              --client-id "$Env:AZURE_CLIENT_ID" `
              --federated-credential-provider "github" `
              --tenant-id "$Env:AZURE_TENANT_ID"
          shell: pwsh

        - name: Log in to Azure
          run: az login --service-principal --username ${{ env.AZURE_CLIENT_ID }} --password ${{ env.AZURE_CLIENT_SECRET }} --tenant ${{ env.AZURE_TENANT_ID }}


        # - name: Log in with Azure (Client Credentials)
        #   if: ${{ env.AZURE_CREDENTIALS != '' }}
        #   run: |
        #     $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
        #     Write-Host "::add-mask::$($info.clientSecret)"

        #     azd auth login `
        #       --client-id "$($info.clientId)" `
        #       --client-secret "$($info.clientSecret)" `
        #       --tenant-id "$($info.tenantId)"
        #   shell: pwsh
        #   env:
        #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Prevent removing custom domains
          run: azd config set alpha.aca.persistDomains on --no-prompt

        - name: Provision Infrastructure
          run: azd provision --no-prompt
          env:
            AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
            AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
            AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          
        - name: Verify custom domains persistence configuration
          run: azd config get alpha.aca.persistDomains

        - name: Deploy Application
          run: azd deploy --no-prompt
          env:
            AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
            AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
            AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}


        - name: 2 Verify custom domains persistence configuration
          run: azd config get alpha.aca.persistDomains

        - name: Output Deployment URI
          id: output
          run: |
            azd env get-values > .env
            source .env
            echo "uri=$BACKEND_URI" >> "$GITHUB_OUTPUT"

    # TODO: Add smoke tests
    # smoketests:
    #   runs-on: ubuntu-latest
    #   needs: build
    #   steps:

    #     - name: Basic smoke test (curl)
    #       env:
    #         URI: ${{needs.build.outputs.uri}}
    #       run: |
    #         echo "Sleeping 1 minute due to https://github.com/Azure/azure-dev/issues/2669"
    #         sleep 60
    #         curl -sSf $URI
    #     - name: Checkout
    #       uses: actions/checkout@v3

    #     - name: Setup python
    #       uses: actions/setup-python@v4
    #       with:
    #         python-version: 3.12

    #     - name: End-to-end smoke tests (playwright)
    #       env:
    #         URI: ${{needs.build.outputs.uri}}
    #       run: |
    #         python3 -m pip install --upgrade pip
    #         python3 -m pip install -r requirements-dev.txt
    #         python3 -m playwright install chromium --with-deps
    #         python3 -m pytest --exitfirst src/tests/smoke/smoketests.py --live-server-url $URI
